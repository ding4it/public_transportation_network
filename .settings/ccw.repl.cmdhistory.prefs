cmdhistory=["(demo)" "(if-let [a nil]\\n  1\\n  2)" "(def p \#{(point. \\"node1\\" 10 10 ) (point. \\"node2\\" 100 100)})" "(first p)" "(second p)" "(getPointFromPoints p 10 10)" "(first nil)" "(getPointFromPoints p 10 10)" "(getPointFromPoints p 10 101\\n                    )" "(nearEqual 10 12)" "(nearEqual 10 20)" "(nearEqual 0 9)" "(demo)" "(cons 1 {1 2 3})" "(cons 1 \#{1 2 3})" "(conj \#{1 2 3} 1)" "(demo)" "(main)" "(-main\\n  )" "(demo)" "(filter even? [1 3])" "(nil? ())" "(demo)" "(-main)" "(demo)" "(doc addLine)" "ThreadLocal" "doc" "(source addLine)" "*verbose-defrecords*" "*clojure-version*" "(doc clojure.core)" "(require clojure.tools.nrepl)" "(require clojure.repl)" "doc" "(demo)" "(contains? {1 2 3 4} 3)" "(demo)" "(assoc {1 2} 1 3)" "(demo)" "(first {1 2 3 4})" "(demo)" "(type [12 2 3])" "(isa? [1 2 3] Vector)" "(isa? [1 2 3] java.util.Vector)" "(demo)" "(type [])" "(demo)" "(nth 2 {1 2 3 4 5 6 7 87})" "(get {1 2 3 4 5 6 67 78} 3)" "(demo)" "(def a (Point. \\"feag\\" 1 1))" "(def a (point. \\"feag\\" 1 1))" "(\:name a)" "(demo)" "(type \\"fe\\")" "(\= \\"feag\\" (\:name a))" "(demo)" "(int \\"02\\")" "(String.parseInt \\"012\\")" "(java.lang.Integer/parseInt \\"0123\\")" "(demo)" "(map [1 2 3 4])" "{[12 3 4 5]}" "(conj {} 1 2)" "(conj {} [1 2])" "(demo)" "(assoc-in {} [1 2] 4)" "(demo)" "(cast Integer 12)" "(cast Integer 1)" "(cast Long 12)" "(type (cast Long 12))" "(type 12 )" "(demo)" "(+ 1 2)" "(demo)" "(if-let [a (java.lang.Integer/parseInt \\"fe\\")]\\n          1 2)" "(if-let [a (java.lang.Integer/parseInt \\"12\\")]\\r\\n             1 2)" "(demo)"]
eclipse.preferences.version=1
